/*
 * Workflow Execution Service
 *
 * *Run standard workflows on workflow execution platforms in a platform-agnostic way.* ## Executive Summary The Workflow Execution Service (WES) API provides a standard way for users to submit workflow requests to workflow execution systems, and to monitor their execution. This API lets users run a single workflow (currently [**CWL**](https://www.commonwl.org/) or [**WDL**](http://www.openwdl.org/) formatted workflows, other types may be supported in the future) on multiple different platforms, clouds, and environments. Key features of the API: + can request that a workflow be run + can pass parameters to that workflow (e.g. input files, cmdline arguments) + can get information about running workflows (e.g. status, errors, output file locations) + can cancel a running workflow 
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// RunRequest : To execute a workflow, send a run request including all the details needed to begin downloading and executing a given workflow. If workflow_engine and workflow_engine_version are not provided, servers can use the most recent workflow_engine_version of workflow_engine that WES instance uses to process the request if  supports for the requested workflow_type.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunRequest {
    /// REQUIRED The workflow run parameterizations (JSON encoded), including input and output file locations
    #[serde(rename = "workflow_params", skip_serializing_if = "Option::is_none")]
    pub workflow_params: Option<serde_json::Value>,
    /// REQUIRED The workflow descriptor type, must be \"CWL\" or \"WDL\" currently (or another alternative supported by this WES instance)
    #[serde(rename = "workflow_type")]
    pub workflow_type: String,
    /// REQUIRED The workflow descriptor type version, must be one supported by this WES instance
    #[serde(rename = "workflow_type_version")]
    pub workflow_type_version: String,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "workflow_engine_parameters", skip_serializing_if = "Option::is_none")]
    pub workflow_engine_parameters: Option<std::collections::HashMap<String, String>>,
    /// The workflow engine, must be one supported by this WES instance. Required if workflow_engine_version is provided.
    #[serde(rename = "workflow_engine", skip_serializing_if = "Option::is_none")]
    pub workflow_engine: Option<String>,
    /// The workflow engine version, must be one supported by this WES instance. If workflow_engine is provided, but workflow_engine_version is not, servers can make no assumptions with regard to the engine version the WES instance uses to process the request if  that WES instance supports multiple versions of the requested engine.
    #[serde(rename = "workflow_engine_version", skip_serializing_if = "Option::is_none")]
    pub workflow_engine_version: Option<String>,
    /// REQUIRED The workflow CWL or WDL document. When `workflow_attachments` is used to attach files, the `workflow_url` may be a relative path to one of the attachments.
    #[serde(rename = "workflow_url")]
    pub workflow_url: String,
}

impl RunRequest {
    /// To execute a workflow, send a run request including all the details needed to begin downloading and executing a given workflow. If workflow_engine and workflow_engine_version are not provided, servers can use the most recent workflow_engine_version of workflow_engine that WES instance uses to process the request if  supports for the requested workflow_type.
    pub fn new(workflow_type: String, workflow_type_version: String, workflow_url: String) -> RunRequest {
        RunRequest {
            workflow_params: None,
            workflow_type,
            workflow_type_version,
            tags: None,
            workflow_engine_parameters: None,
            workflow_engine: None,
            workflow_engine_version: None,
            workflow_url,
        }
    }
}

