/*
 * Workflow Execution Service
 *
 * *Run standard workflows on workflow execution platforms in a platform-agnostic way.* ## Executive Summary The Workflow Execution Service (WES) API provides a standard way for users to submit workflow requests to workflow execution systems, and to monitor their execution. This API lets users run a single workflow (currently [**CWL**](https://www.commonwl.org/) or [**WDL**](http://www.openwdl.org/) formatted workflows, other types may be supported in the future) on multiple different platforms, clouds, and environments. Key features of the API: + can request that a workflow be run + can pass parameters to that workflow (e.g. input files, cmdline arguments) + can get information about running workflows (e.g. status, errors, output file locations) + can cancel a running workflow 
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunLog {
    /// workflow run ID
    #[serde(rename = "run_id", skip_serializing_if = "Option::is_none")]
    pub run_id: Option<String>,
    #[serde(rename = "request", skip_serializing_if = "Option::is_none")]
    pub request: Option<Box<models::RunRequest>>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<models::State>,
    #[serde(rename = "run_log", skip_serializing_if = "Option::is_none")]
    pub run_log: Option<Box<models::Log>>,
    /// A reference to the complete url which may be used to obtain a paginated list of task logs for this workflow
    #[serde(rename = "task_logs_url", skip_serializing_if = "Option::is_none")]
    pub task_logs_url: Option<String>,
    /// The logs, and other key info like timing and exit code, for each step in the workflow run. This field is deprecated and the `task_logs_url` should be used to retrieve a paginated list of steps from the workflow run. This field will be removed in the next major version of the  specification (2.0.0)
    #[serde(rename = "task_logs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub task_logs: Option<Option<Vec<models::RunLogTaskLogsInner>>>,
    /// The outputs from the workflow run.
    #[serde(rename = "outputs", skip_serializing_if = "Option::is_none")]
    pub outputs: Option<serde_json::Value>,
}

impl RunLog {
    pub fn new() -> RunLog {
        RunLog {
            run_id: None,
            request: None,
            state: None,
            run_log: None,
            task_logs_url: None,
            task_logs: None,
            outputs: None,
        }
    }
}

