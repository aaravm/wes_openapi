/*
 * Workflow Execution Service
 *
 * *Run standard workflows on workflow execution platforms in a platform-agnostic way.* ## Executive Summary The Workflow Execution Service (WES) API provides a standard way for users to submit workflow requests to workflow execution systems, and to monitor their execution. This API lets users run a single workflow (currently [**CWL**](https://www.commonwl.org/) or [**WDL**](http://www.openwdl.org/) formatted workflows, other types may be supported in the future) on multiple different platforms, clouds, and environments. Key features of the API: + can request that a workflow be run + can pass parameters to that workflow (e.g. input files, cmdline arguments) + can get information about running workflows (e.g. status, errors, output file locations) + can cancel a running workflow 
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// TaskListResponse : The service will return a TaskListResponse when receiving a successful TaskListRequest.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskListResponse {
    /// The logs, and other key info like timing and exit code, for each step in the workflow run.
    #[serde(rename = "task_logs", skip_serializing_if = "Option::is_none")]
    pub task_logs: Option<Vec<models::TaskLog>>,
    /// A token which may be supplied as `page_token` in workflow run task list request to get the next page of results.  An empty string indicates there are no more items to return.
    #[serde(rename = "next_page_token", skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

impl TaskListResponse {
    /// The service will return a TaskListResponse when receiving a successful TaskListRequest.
    pub fn new() -> TaskListResponse {
        TaskListResponse {
            task_logs: None,
            next_page_token: None,
        }
    }
}

