/*
 * Workflow Execution Service
 *
 * *Run standard workflows on workflow execution platforms in a platform-agnostic way.* ## Executive Summary The Workflow Execution Service (WES) API provides a standard way for users to submit workflow requests to workflow execution systems, and to monitor their execution. This API lets users run a single workflow (currently [**CWL**](https://www.commonwl.org/) or [**WDL**](http://www.openwdl.org/) formatted workflows, other types may be supported in the future) on multiple different platforms, clouds, and environments. Key features of the API: + can request that a workflow be run + can pass parameters to that workflow (e.g. input files, cmdline arguments) + can get information about running workflows (e.g. status, errors, output file locations) + can cancel a running workflow 
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Log : Log and other info
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Log {
    /// The task or workflow name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The command line that was executed
    #[serde(rename = "cmd", skip_serializing_if = "Option::is_none")]
    pub cmd: Option<Vec<String>>,
    /// When the command started executing, in ISO 8601 format \"%Y-%m-%dT%H:%M:%SZ\"
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format \"%Y-%m-%dT%H:%M:%SZ\"
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// A URL to retrieve standard output logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.
    #[serde(rename = "stdout", skip_serializing_if = "Option::is_none")]
    pub stdout: Option<String>,
    /// A URL to retrieve standard error logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.
    #[serde(rename = "stderr", skip_serializing_if = "Option::is_none")]
    pub stderr: Option<String>,
    /// Exit code of the program
    #[serde(rename = "exit_code", skip_serializing_if = "Option::is_none")]
    pub exit_code: Option<i32>,
    /// System logs are any logs the system decides are relevant, which are not tied directly to a workflow. Content is implementation specific: format, size, etc.  System logs may be collected here to provide convenient access.  For example, the system may include an error message that caused a SYSTEM_ERROR state (e.g. disk is full), etc.
    #[serde(rename = "system_logs", skip_serializing_if = "Option::is_none")]
    pub system_logs: Option<Vec<String>>,
}

impl Log {
    /// Log and other info
    pub fn new() -> Log {
        Log {
            name: None,
            cmd: None,
            start_time: None,
            end_time: None,
            stdout: None,
            stderr: None,
            exit_code: None,
            system_logs: None,
        }
    }
}

